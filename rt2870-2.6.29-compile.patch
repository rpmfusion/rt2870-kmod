diff -rupN 2009_0302_RT2870_Linux_STA_v2.1.0.0.old/os/linux/rt_linux.c 2009_0302_RT2870_Linux_STA_v2.1.0.0/os/linux/rt_linux.c
--- 2009_0302_RT2870_Linux_STA_v2.1.0.0.old/os/linux/rt_linux.c	2009-03-02 00:25:40.000000000 -0500
+++ 2009_0302_RT2870_Linux_STA_v2.1.0.0/os/linux/rt_linux.c	2009-03-25 21:28:36.000000000 -0400
@@ -1309,8 +1309,12 @@ int RtmpOSNetDevAddrSet(
 	RTMP_ADAPTER *pAd;
 		
 	net_dev = pNetDev;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	pAd = (RTMP_ADAPTER *)net_dev->priv;
-	
+#else
+	pAd = (RTMP_ADAPTER *)net_dev->ml_priv;
+#endif
+
 #ifdef CONFIG_STA_SUPPORT
 	// work-around for the SuSE due to it has it's own interface name management system.
 	IF_DEV_CONFIG_OPMODE_ON_STA(pAd)
@@ -1502,8 +1506,12 @@ int RtmpOSNetDevAttach(
 	// If we need hook some callback function to the net device structrue, now do it.
 	if (pDevOpHook)
 	{
-		PRTMP_ADAPTER pAd = (PRTMP_ADAPTER)pNetDev->priv;
-	
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
+	  PRTMP_ADAPTER pAd = (PRTMP_ADAPTER)pNetDev->priv;
+#else
+		PRTMP_ADAPTER pAd = (PRTMP_ADAPTER)pNetDev->ml_priv;
+#endif
+        
 		pNetDev->open			= pDevOpHook->open;
 		pNetDev->stop			= pDevOpHook->stop;
 		pNetDev->hard_start_xmit	= (HARD_START_XMIT_FUNC)(pDevOpHook->xmit);
diff -rupN 2009_0302_RT2870_Linux_STA_v2.1.0.0.old/os/linux/rt_main_dev.c 2009_0302_RT2870_Linux_STA_v2.1.0.0/os/linux/rt_main_dev.c
--- 2009_0302_RT2870_Linux_STA_v2.1.0.0.old/os/linux/rt_main_dev.c	2009-03-01 21:54:46.000000000 -0500
+++ 2009_0302_RT2870_Linux_STA_v2.1.0.0/os/linux/rt_main_dev.c	2009-03-25 22:24:30.000000000 -0400
@@ -93,8 +93,11 @@ Note:
 */
 int MainVirtualIF_close(IN struct net_device *net_dev)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
     RTMP_ADAPTER *pAd = net_dev->priv;
-
+#else
+    RTMP_ADAPTER *pAd = net_dev->ml_priv;
+#endif
 	// Sanity check for pAd
 	if (pAd == NULL)
 		return 0; // close ok
@@ -133,7 +136,11 @@ Note:
 */
 int MainVirtualIF_open(IN struct net_device *net_dev)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
     RTMP_ADAPTER *pAd = net_dev->priv;
+#else
+    RTMP_ADAPTER *pAd = net_dev->ml_priv;
+#endif
 
 	// Sanity check for pAd
 	if (pAd == NULL)
@@ -175,7 +182,11 @@ Note:
 int rt28xx_close(IN PNET_DEV dev)
 {
 	struct net_device * net_dev = (struct net_device *)dev;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
     RTMP_ADAPTER	*pAd = net_dev->priv;
+#else
+    RTMP_ADAPTER	*pAd = net_dev->ml_priv;
+#endif
 	BOOLEAN 		Cancelled;
 	UINT32			i = 0;
 #ifdef RTMP_MAC_USB
@@ -404,7 +415,11 @@ Note:
 int rt28xx_open(IN PNET_DEV dev)
 {				 
 	struct net_device * net_dev = (struct net_device *)dev;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAd = (PRTMP_ADAPTER)net_dev->priv;
+#else
+	PRTMP_ADAPTER pAd = (PRTMP_ADAPTER)net_dev->ml_priv;
+#endif
 	int retval = 0;
  	//POS_COOKIE pObj;
 
@@ -522,8 +537,11 @@ PNET_DEV RtmpPhyNetDevInit(
 	pNetDevHook->get_stats = RT28xx_get_ether_stats;
 
 	pNetDevHook->needProtcted = FALSE;
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	net_dev->priv = (PVOID)pAd;
+#else
+	net_dev->ml_priv = (PVOID)pAd;
+#endif
 	pAd->net_dev = net_dev;
 	
 
@@ -559,7 +577,11 @@ Note:
 int rt28xx_packet_xmit(struct sk_buff *skb)
 {
 	struct net_device *net_dev = skb->dev;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAd = (PRTMP_ADAPTER) net_dev->priv;
+#else
+	PRTMP_ADAPTER pAd = (PRTMP_ADAPTER) net_dev->ml_priv;
+#endif
 	int status = 0;
 	PNDIS_PACKET pPacket = (PNDIS_PACKET) skb;
 
@@ -641,7 +663,11 @@ static int rt28xx_send_packets(
 	IN struct sk_buff 		*skb_p, 
 	IN struct net_device 	*net_dev)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	RTMP_ADAPTER *pAd = net_dev->priv;
+#else
+	RTMP_ADAPTER *pAd = net_dev->ml_priv;
+#endif
 
 	if (!(net_dev->flags & IFF_UP))
 	{
@@ -661,7 +687,11 @@ static int rt28xx_send_packets(
 struct iw_statistics *rt28xx_get_wireless_stats(
     IN struct net_device *net_dev)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAd = (PRTMP_ADAPTER) net_dev->priv;
+#else
+	PRTMP_ADAPTER pAd = (PRTMP_ADAPTER) net_dev->ml_priv;
+#endif
 
 
 	DBGPRINT(RT_DEBUG_TRACE, ("rt28xx_get_wireless_stats --->\n"));
@@ -709,7 +739,11 @@ INT rt28xx_ioctl(
 	RTMP_ADAPTER	*pAd = NULL;
 	INT				ret = 0;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	pAd = net_dev->priv;
+#else
+	pAd = net_dev->ml_priv;
+#endif
 	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
@@ -751,7 +785,11 @@ static struct net_device_stats *RT28xx_g
     RTMP_ADAPTER *pAd = NULL;
 
 	if (net_dev)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 		pAd = net_dev->priv;
+#else
+		pAd = net_dev->ml_priv;
+#endif
 
 	if (pAd)
 	{
diff -rupN 2009_0302_RT2870_Linux_STA_v2.1.0.0.old/os/linux/sta_ioctl.c 2009_0302_RT2870_Linux_STA_v2.1.0.0/os/linux/sta_ioctl.c
--- 2009_0302_RT2870_Linux_STA_v2.1.0.0.old/os/linux/sta_ioctl.c	2009-03-02 00:47:04.000000000 -0500
+++ 2009_0302_RT2870_Linux_STA_v2.1.0.0/os/linux/sta_ioctl.c	2009-03-25 22:46:53.000000000 -0400
@@ -612,7 +612,11 @@ int rt_ioctl_siwfreq(struct net_device *
 			struct iw_request_info *info,
 			struct iw_freq *freq, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	int 	chan = -1;
 
     //check if the interface is down
@@ -651,7 +655,11 @@ int rt_ioctl_giwfreq(struct net_device *
 	UCHAR ch;
 	ULONG	m = 2412000;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	pAdapter = dev->priv;
+#else
+	pAdapter = dev->ml_priv;
+#endif
 	if (pAdapter == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
@@ -674,7 +682,11 @@ int rt_ioctl_siwmode(struct net_device *
 		   struct iw_request_info *info,
 		   __u32 *mode, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	//check if the interface is down
     if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
@@ -712,7 +724,11 @@ int rt_ioctl_giwmode(struct net_device *
 		   struct iw_request_info *info,
 		   __u32 *mode, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	if (pAdapter == NULL)
 	{
@@ -742,7 +758,11 @@ int rt_ioctl_siwsens(struct net_device *
 		   struct iw_request_info *info,
 		   char *name, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	//check if the interface is down
     	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
@@ -765,7 +785,11 @@ int rt_ioctl_giwrange(struct net_device 
 		   struct iw_request_info *info,
 		   struct iw_point *data, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	struct iw_range *range = (struct iw_range *) extra;
 	u16 val;
 	int i;
@@ -855,7 +879,11 @@ int rt_ioctl_siwap(struct net_device *de
 		      struct iw_request_info *info,
 		      struct sockaddr *ap_addr, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
     NDIS_802_11_MAC_ADDRESS Bssid;
 
 	//check if the interface is down
@@ -895,7 +923,11 @@ int rt_ioctl_giwap(struct net_device *de
 		      struct iw_request_info *info,
 		      struct sockaddr *ap_addr, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	if (pAdapter == NULL)
 	{
@@ -970,7 +1002,11 @@ int rt_ioctl_iwaplist(struct net_device 
 			struct iw_request_info *info,
 			struct iw_point *data, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
  	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+ 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	struct sockaddr addr[IW_MAX_AP];
 	struct iw_quality qual[IW_MAX_AP];
@@ -1006,7 +1042,11 @@ int rt_ioctl_siwscan(struct net_device *
 			struct iw_request_info *info,
 			struct iw_point *data, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	ULONG								Now;
 	int Status = NDIS_STATUS_SUCCESS;
@@ -1088,7 +1128,11 @@ int rt_ioctl_giwscan(struct net_device *
 			struct iw_point *data, char *extra)
 {
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	int i=0;
 	PSTRING current_ev = extra, previous_ev = extra;
 	PSTRING end_buf;
@@ -1457,7 +1501,11 @@ int rt_ioctl_siwessid(struct net_device 
 			 struct iw_request_info *info,
 			 struct iw_point *data, char *essid)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	//check if the interface is down
     if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
@@ -1498,7 +1546,11 @@ int rt_ioctl_giwessid(struct net_device 
 			 struct iw_request_info *info,
 			 struct iw_point *data, char *essid)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	if (pAdapter == NULL)
 	{
@@ -1544,7 +1596,11 @@ int rt_ioctl_siwnickn(struct net_device 
 			 struct iw_request_info *info,
 			 struct iw_point *data, char *nickname)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
     //check if the interface is down
     if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
@@ -1567,7 +1623,11 @@ int rt_ioctl_giwnickn(struct net_device 
 			 struct iw_request_info *info,
 			 struct iw_point *data, char *nickname)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	if (pAdapter == NULL)
 	{
@@ -1589,7 +1649,11 @@ int rt_ioctl_siwrts(struct net_device *d
 		       struct iw_request_info *info,
 		       struct iw_param *rts, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	u16 val;
 
     //check if the interface is down
@@ -1618,7 +1682,11 @@ int rt_ioctl_giwrts(struct net_device *d
 		       struct iw_request_info *info,
 		       struct iw_param *rts, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	if (pAdapter == NULL)
 	{
@@ -1645,7 +1713,11 @@ int rt_ioctl_siwfrag(struct net_device *
 			struct iw_request_info *info,
 			struct iw_param *frag, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	u16 val;
 
 	//check if the interface is down
@@ -1672,7 +1744,11 @@ int rt_ioctl_giwfrag(struct net_device *
 			struct iw_request_info *info,
 			struct iw_param *frag, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	if (pAdapter == NULL)
 	{
@@ -1701,7 +1777,11 @@ int rt_ioctl_siwencode(struct net_device
 			  struct iw_request_info *info,
 			  struct iw_point *erq, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	//check if the interface is down
 	if(!RTMP_TEST_FLAG(pAdapter, fRTMP_ADAPTER_INTERRUPT_IN_USE))
@@ -1807,7 +1887,11 @@ rt_ioctl_giwencode(struct net_device *de
 			  struct iw_point *erq, char *key)
 {
 	int kid;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 	if (pAdapter == NULL)
 	{
@@ -1877,7 +1961,11 @@ rt_ioctl_setparam(struct net_device *dev
 	PSTRING value;
 	int  Status=0;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	pAdapter = dev->priv;
+#else
+	pAdapter = dev->ml_priv;
+#endif
 	if (pAdapter == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
@@ -1941,7 +2029,11 @@ rt_private_get_statistics(struct net_dev
 		struct iw_point *wrq, char *extra)
 {
 	INT				Status = 0;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
     PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->priv;
+#else
+    PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
     if (extra == NULL)
     {
@@ -2068,7 +2160,11 @@ rt_private_show(struct net_device *dev, 
 	POS_COOKIE		pObj;
 	u32             subcmd = wrq->flags;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	pAd = dev->priv;
+#else
+	pAd = dev->ml_priv;
+#endif
 	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
@@ -2220,7 +2316,11 @@ int rt_ioctl_siwmlme(struct net_device *
 			   union iwreq_data *wrqu,
 			   char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	struct iw_mlme *pMlme = (struct iw_mlme *)wrqu->data.pointer;
 	MLME_QUEUE_ELEM				MsgElem;
 	MLME_DISASSOC_REQ_STRUCT	DisAssocReq;
@@ -2277,7 +2377,11 @@ int rt_ioctl_siwauth(struct net_device *
 			  struct iw_request_info *info,
 			  union iwreq_data *wrqu, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER   pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER   pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	struct iw_param *param = &wrqu->param;
 
     //check if the interface is down
@@ -2430,7 +2534,11 @@ int rt_ioctl_giwauth(struct net_device *
 			       struct iw_request_info *info,
 			       union iwreq_data *wrqu, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER   pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER   pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	struct iw_param *param = &wrqu->param;
 
     //check if the interface is down
@@ -2504,7 +2612,11 @@ int rt_ioctl_siwencodeext(struct net_dev
 			   union iwreq_data *wrqu,
 			   char *extra)
 			{
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
     PRTMP_ADAPTER   pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+    PRTMP_ADAPTER   pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	struct iw_point *encoding = &wrqu->encoding;
 	struct iw_encode_ext *ext = (struct iw_encode_ext *)extra;
     int keyIdx, alg = ext->alg;
@@ -2629,7 +2741,11 @@ rt_ioctl_giwencodeext(struct net_device 
 			  struct iw_request_info *info,
 			  union iwreq_data *wrqu, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER pAd = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER pAd = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	PCHAR pKey = NULL;
 	struct iw_point *encoding = &wrqu->encoding;
 	struct iw_encode_ext *ext = (struct iw_encode_ext *)extra;
@@ -2713,7 +2829,11 @@ int rt_ioctl_siwgenie(struct net_device 
 			  struct iw_request_info *info,
 			  union iwreq_data *wrqu, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	
 	DBGPRINT(RT_DEBUG_TRACE ,("===> rt_ioctl_siwgenie\n"));
 #ifdef NATIVE_WPA_SUPPLICANT_SUPPORT
@@ -2745,7 +2865,11 @@ int rt_ioctl_giwgenie(struct net_device 
 			       struct iw_request_info *info,
 			       union iwreq_data *wrqu, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	
 	if ((pAd->StaCfg.RSNIE_Len == 0) ||
 		(pAd->StaCfg.AuthMode < Ndis802_11AuthModeWPA))
@@ -2791,7 +2915,11 @@ int rt_ioctl_siwpmksa(struct net_device 
 			   union iwreq_data *wrqu,
 			   char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->priv;
+#else
+	PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 	struct iw_pmksa *pPmksa = (struct iw_pmksa *)wrqu->data.pointer;
 	INT	CachedIdx = 0, idx = 0;
 
@@ -2875,7 +3003,11 @@ rt_private_ioctl_bbp(struct net_device *
 	UINT32				bbpValue;
 	BOOLEAN				bIsPrintAllBBP = FALSE;
 	INT					Status = 0;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
     PRTMP_ADAPTER       pAdapter = (PRTMP_ADAPTER) dev->priv;
+#else
+    PRTMP_ADAPTER       pAdapter = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
 
 
 	memset(extra, 0x00, IW_PRIV_SIZE_MASK);
@@ -3002,7 +3134,11 @@ int rt_ioctl_siwrate(struct net_device *
 			struct iw_request_info *info,
 			union iwreq_data *wrqu, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
     PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->priv;
+#else
+    PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
     UINT32          rate = wrqu->bitrate.value, fixed = wrqu->bitrate.fixed;
 
     //check if the interface is down
@@ -3060,7 +3196,11 @@ int rt_ioctl_giwrate(struct net_device *
 			       struct iw_request_info *info,
 			       union iwreq_data *wrqu, char *extra)
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
     PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->priv;
+#else
+    PRTMP_ADAPTER   pAd = (PRTMP_ADAPTER) dev->ml_priv;
+#endif
     int rate_index = 0, rate_count = 0;
     HTTRANSMIT_SETTING ht_setting; 
     __s32 ralinkrate[] =
@@ -5512,8 +5652,11 @@ INT rt28xx_sta_ioctl(
 	INT					Status = NDIS_STATUS_SUCCESS;
 	USHORT				subcmd;
 
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 	pAd = net_dev->priv;
+#else
+	pAd = net_dev->ml_priv;
+#endif
 	if (pAd == NULL)
 	{
 		/* if 1st open fail, pAd will be free;
